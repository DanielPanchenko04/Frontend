/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostsImport } from './routes/posts'
import { Route as LoginImport } from './routes/login'
import { Route as HomeImport } from './routes/home'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as PostsNewImport } from './routes/posts.new'
import { Route as PostsIdImport } from './routes/posts/$id'

// Create/Update Routes

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)

const PostsNewRoute = PostsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => PostsRoute,
} as any)

const PostsIdRoute = PostsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => PostsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/posts/$id': {
      id: '/posts/$id'
      path: '/$id'
      fullPath: '/posts/$id'
      preLoaderRoute: typeof PostsIdImport
      parentRoute: typeof PostsImport
    }
    '/posts/new': {
      id: '/posts/new'
      path: '/new'
      fullPath: '/posts/new'
      preLoaderRoute: typeof PostsNewImport
      parentRoute: typeof PostsImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsImport
    }
  }
}

// Create and export the route tree

interface PostsRouteChildren {
  PostsIdRoute: typeof PostsIdRoute
  PostsNewRoute: typeof PostsNewRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsIdRoute: PostsIdRoute,
  PostsNewRoute: PostsNewRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/posts': typeof PostsRouteWithChildren
  '/posts/$id': typeof PostsIdRoute
  '/posts/new': typeof PostsNewRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/login': typeof LoginRoute
  '/posts/$id': typeof PostsIdRoute
  '/posts/new': typeof PostsNewRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/home': typeof HomeRoute;
  '/login': typeof LoginRoute;
  '/posts': typeof PostsRouteWithChildren;
  '/posts/$id': typeof PostsIdRoute;
  '/posts/new': typeof PostsNewRoute;
  '/posts/': typeof PostsIndexRoute;
  [key: string]: AnyRoute;  
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/login'
    | '/posts'
    | '/posts/$id'
    | '/posts/new'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/home' | '/login' | '/posts/$id' | '/posts/new' | '/posts'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/login'
    | '/posts'
    | '/posts/$id'
    | '/posts/new'
    | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  LoginRoute: typeof LoginRoute
  PostsRoute: typeof PostsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  LoginRoute: LoginRoute,
  PostsRoute: PostsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.ts",
      "children": [
        "/",
        "/home",
        "/login",
        "/posts"
      ]
    },
    "/": {
      "filePath": "index.ts"
    },
    "/home": {
      "filePath": "home.ts"
    },
    "/login": {
      "filePath": "login.ts"
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$id",
        "/posts/new",
        "/posts/"
      ]
    },
    "/posts/$id": {
      "filePath": "posts/$id.ts",
      "parent": "/posts"
    },
    "/posts/new": {
      "filePath": "posts.new.ts",
      "parent": "/posts"
    },
    "/posts/": {
      "filePath": "posts/index.ts",
      "parent": "/posts"
    }
  }
}
ROUTE_MANIFEST_END */
